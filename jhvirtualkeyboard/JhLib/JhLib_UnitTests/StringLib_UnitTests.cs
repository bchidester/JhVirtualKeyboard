using System;
using JhLib;
using NUnit.Framework;


namespace JHLib_UnitTests
{
    [TestFixture, Timeout(60000)]
    public class StringLib_UnitTests
    {
        [TestCase(null, false)]
        [TestCase("", false)]
        [TestCase("C", false)]
        [TestCase("C:", true)]
        [TestCase(@"C:\", true)]
        [TestCase(@"X:\Y", true)]
        public void StartsWithDrive(string testString, bool expectedResult)
        {
            bool actualResult = StringLib.StartsWithDrive(testString);
            Assert.AreEqual(expectedResult, actualResult);
        }


        [TestCase('A', true)]
        [TestCase('b', true)]
        [TestCase('C', true)]
        [TestCase('z', true)]
        [TestCase('1', false)]
        public void IsEnglishAlphabetLetter_A_CorrectResult(char inputChar, bool expectedResult)
        {
            bool actualResult = inputChar.IsEnglishAlphabetLetter();
            Assert.AreEqual(expectedResult, actualResult);
        }

        [TestCase(12, "012345678901")]
        [TestCase(11, "01234567890")]
        [TestCase(10, "0123456789")]
        [TestCase(9, "012345678")]
        [TestCase(4, "0123")]
        [TestCase(3, "012")]
        [TestCase(2, "01")]
        [TestCase(1, "0")]
        [TestCase(0, "")]
        public void TestStringOfLength_ZeroInput_ReturnsEmptyString(int length, string expectedResult)
        {
            string result = StringLib.TestStringOfLength(length);
            Assert.AreEqual(expectedResult, result);
        }

        #region ToCardinal

        [TestCase(0, "zero")]
        [TestCase(1, "one")]
        [TestCase(2, "two")]
        [TestCase(3, "three")]
        [TestCase(4, "four")]
        [TestCase(5, "five")]
        [TestCase(6, "six")]
        [TestCase(7, "seven")]
        [TestCase(8, "eight")]
        [TestCase(9, "nine")]
        [TestCase(10, "ten")]
        [TestCase(11, "eleven")]
        [TestCase(12, "twelve")]
        [TestCase(13, "thirteen")]
        [TestCase(14, "fourteen")]
        [TestCase(15, "fifteen")]
        [TestCase(16, "sixteen")]
        [TestCase(17, "seventeen")]
        [TestCase(18, "eighteen")]
        [TestCase(19, "nineteen")]
        [TestCase(20, "twenty")]
        [TestCase(21, "twenty one")]
        [TestCase(22, "twenty two")]
        [TestCase(23, "twenty three")]
        [TestCase(24, "twenty four")]
        [TestCase(25, "twenty five")]
        [TestCase(26, "twenty six")]
        [TestCase(27, "twenty seven")]
        [TestCase(28, "twenty eight")]
        [TestCase(29, "twenty nine")]
        [TestCase(30, "thirty")]
        [TestCase(31, "thirty one")]
        [TestCase(32, "thirty two")]
        [TestCase(33, "thirty three")]
        [TestCase(34, "thirty four")]
        [TestCase(35, "thirty five")]
        [TestCase(36, "thirty six")]
        [TestCase(37, "thirty seven")]
        [TestCase(38, "thirty eight")]
        [TestCase(39, "thirty nine")]
        [TestCase(40, "forty")]
        [TestCase(41, "forty one")]
        [TestCase(42, "forty two")]
        [TestCase(43, "forty three")]
        [TestCase(44, "forty four")]
        [TestCase(45, "forty five")]
        [TestCase(46, "forty six")]
        [TestCase(47, "forty seven")]
        [TestCase(48, "forty eight")]
        [TestCase(49, "forty nine")]
        [TestCase(50, "fifty")]
        [TestCase(51, "fifty one")]
        [TestCase(52, "fifty two")]
        [TestCase(53, "fifty three")]
        [TestCase(54, "fifty four")]
        [TestCase(55, "fifty five")]
        [TestCase(56, "fifty six")]
        [TestCase(57, "fifty seven")]
        [TestCase(58, "fifty eight")]
        [TestCase(59, "fifty nine")]
        [TestCase(60, "sixty")]
        [TestCase(61, "sixty one")]
        [TestCase(62, "sixty two")]
        [TestCase(63, "sixty three")]
        [TestCase(64, "sixty four")]
        [TestCase(65, "sixty five")]
        [TestCase(66, "sixty six")]
        [TestCase(67, "sixty seven")]
        [TestCase(68, "sixty eight")]
        [TestCase(69, "sixty nine")]
        [TestCase(70, "seventy")]
        [TestCase(71, "seventy one")]
        [TestCase(72, "seventy two")]
        [TestCase(73, "seventy three")]
        [TestCase(74, "seventy four")]
        [TestCase(75, "seventy five")]
        [TestCase(76, "seventy six")]
        [TestCase(77, "seventy seven")]
        [TestCase(78, "seventy eight")]
        [TestCase(79, "seventy nine")]
        [TestCase(80, "eighty")]
        [TestCase(81, "eighty one")]
        [TestCase(82, "eighty two")]
        [TestCase(83, "eighty three")]
        [TestCase(84, "eighty four")]
        [TestCase(85, "eighty five")]
        [TestCase(86, "eighty six")]
        [TestCase(87, "eighty seven")]
        [TestCase(88, "eighty eight")]
        [TestCase(89, "eighty nine")]
        [TestCase(90, "ninety")]
        [TestCase(91, "ninety one")]
        [TestCase(92, "ninety two")]
        [TestCase(93, "ninety three")]
        [TestCase(94, "ninety four")]
        [TestCase(95, "ninety five")]
        [TestCase(96, "ninety six")]
        [TestCase(97, "ninety seven")]
        [TestCase(98, "ninety eight")]
        [TestCase(99, "ninety nine")]
        [TestCase(100, "one hundred")]
        [TestCase(101, "one hundred one")]
        [TestCase(102, "one hundred two")]
        [TestCase(110, "one hundred ten")]
        [TestCase(111, "one hundred eleven")]
        [TestCase(120, "one hundred twenty")]
        [TestCase(121, "one hundred twenty one")]
        [TestCase(130, "one hundred thirty")]
        [TestCase(131, "one hundred thirty one")]
        [TestCase(140, "one hundred forty")]
        [TestCase(141, "one hundred forty one")]
        [TestCase(200, "two hundred")]
        [TestCase(999, "nine hundred ninety nine")]
        [TestCase(1000, "one thousand")]
        [TestCase(1001, "one thousand one")]
        [TestCase(1023, "one thousand twenty three")]
        [TestCase(1100, "one thousand one hundred")]
        [TestCase(1234, "one thousand two hundred thirty four")]
        [TestCase(2345, "two thousand three hundred forty five")]
        [TestCase(100000, "one hundred thousand")]
        [TestCase(100001, "one hundred thousand one")]
        [TestCase(100010, "one hundred thousand ten")]
        [TestCase(100011, "one hundred thousand eleven")]
        [TestCase(100100, "one hundred thousand one hundred")]
        [TestCase(100103, "one hundred thousand one hundred three")]
        [TestCase(100120, "one hundred thousand one hundred twenty")]
        [TestCase(100123, "one hundred thousand one hundred twenty three")]
        [TestCase(101000, "one hundred one thousand")]
        [TestCase(101001, "one hundred one thousand one")]
        [TestCase(101010, "one hundred one thousand ten")]
        [TestCase(101023, "one hundred one thousand twenty three")]
        [TestCase(101200, "one hundred one thousand two hundred")]
        [TestCase(101203, "one hundred one thousand two hundred three")]
        [TestCase(101220, "one hundred one thousand two hundred twenty")]
        [TestCase(101223, "one hundred one thousand two hundred twenty three")]
        [TestCase(123456, "one hundred twenty three thousand four hundred fifty six")]
        [TestCase(1000000, "one million")]
        public void ToCardinal_VerifyResults(int numberValue, string expectedOutput)
        {
            string actualOutput = numberValue.ToCardinal();
            Assert.AreEqual(expectedOutput, actualOutput, String.Format("Should be {0}, not  {1}!!", expectedOutput, actualOutput));
        }

        #endregion ToCardinal

        #region ToOrdinal

        [TestCase(0, "0th")]
        [TestCase(1, "1st")]
        [TestCase(2, "2nd")]
        [TestCase(3, "3rd")]
        [TestCase(4, "4th")]
        [TestCase(5, "5th")]
        [TestCase(6, "6th")]
        [TestCase(7, "7th")]
        [TestCase(8, "8th")]
        [TestCase(9, "9th")]
        [TestCase(10, "10th")]
        [TestCase(11, "11th")]
        [TestCase(12, "12th")]
        [TestCase(13, "13th")]
        [TestCase(14, "14th")]
        [TestCase(15, "15th")]
        [TestCase(16, "16th")]
        [TestCase(17, "17th")]
        [TestCase(18, "18th")]
        [TestCase(19, "19th")]
        [TestCase(20, "20th")]
        [TestCase(21, "21st")]
        [TestCase(22, "22nd")]
        [TestCase(23, "23rd")]
        [TestCase(24, "24th")]
        [TestCase(25, "25th")]
        [TestCase(26, "26th")]
        [TestCase(27, "27th")]
        [TestCase(28, "28th")]
        [TestCase(29, "29th")]
        [TestCase(30, "30th")]
        [TestCase(31, "31st")]
        [TestCase(32, "32nd")]
        [TestCase(33, "33rd")]
        [TestCase(34, "34th")]
        [TestCase(35, "35th")]
        [TestCase(36, "36th")]
        [TestCase(37, "37th")]
        [TestCase(38, "38th")]
        [TestCase(39, "39th")]
        [TestCase(40, "40th")]
        [TestCase(41, "41st")]
        [TestCase(42, "42nd")]
        [TestCase(43, "43rd")]
        [TestCase(44, "44th")]
        [TestCase(45, "45th")]
        [TestCase(46, "46th")]
        [TestCase(47, "47th")]
        [TestCase(48, "48th")]
        [TestCase(49, "49th")]
        [TestCase(50, "50th")]
        [TestCase(51, "51st")]
        [TestCase(52, "52nd")]
        [TestCase(53, "53rd")]
        [TestCase(54, "54th")]
        [TestCase(55, "55th")]
        [TestCase(56, "56th")]
        [TestCase(57, "57th")]
        [TestCase(58, "58th")]
        [TestCase(59, "59th")]
        [TestCase(60, "60th")]
        [TestCase(61, "61st")]
        [TestCase(62, "62nd")]
        [TestCase(63, "63rd")]
        [TestCase(64, "64th")]
        [TestCase(65, "65th")]
        [TestCase(66, "66th")]
        [TestCase(67, "67th")]
        [TestCase(68, "68th")]
        [TestCase(69, "69th")]
        [TestCase(70, "70th")]
        [TestCase(71, "71st")]
        [TestCase(72, "72nd")]
        [TestCase(73, "73rd")]
        [TestCase(74, "74th")]
        [TestCase(75, "75th")]
        [TestCase(76, "76th")]
        [TestCase(77, "77th")]
        [TestCase(78, "78th")]
        [TestCase(79, "79th")]
        [TestCase(80, "80th")]
        [TestCase(81, "81st")]
        [TestCase(82, "82nd")]
        [TestCase(83, "83rd")]
        [TestCase(84, "84th")]
        [TestCase(85, "85th")]
        [TestCase(86, "86th")]
        [TestCase(87, "87th")]
        [TestCase(88, "88th")]
        [TestCase(89, "89th")]
        [TestCase(90, "90th")]
        [TestCase(91, "91st")]
        [TestCase(92, "92nd")]
        [TestCase(93, "93rd")]
        [TestCase(94, "94th")]
        [TestCase(95, "95th")]
        [TestCase(96, "96th")]
        [TestCase(97, "97th")]
        [TestCase(98, "98th")]
        [TestCase(99, "99th")]
        [TestCase(100, "100th")]
        [TestCase(101, "101st")]
        [TestCase(102, "102nd")]
        [TestCase(103, "103rd")]
        [TestCase(104, "104th")]
        [TestCase(105, "105th")]
        [TestCase(106, "106th")]
        [TestCase(107, "107th")]
        [TestCase(108, "108th")]
        [TestCase(109, "109th")]
        [TestCase(110, "110th")]
        [TestCase(1000, "1000th")]
        public void ToOrdinal_NotVerbose_VerifyResults(int numberValue, string expectedOutput)
        {
            string actualOutput = numberValue.ToOrdinal();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        //[TestCase(0, "zeroth")]
        //[TestCase(1, "first")]
        //[TestCase(2, "second")]
        //[TestCase(3, "third")]
        //[TestCase(4, "fourth")]
        //[TestCase(5, "fifth")]
        //[TestCase(6, "sixth")]
        //[TestCase(7, "seventh")]
        //[TestCase(8, "eighth")]
        //[TestCase(9, "ninth")]
        //[TestCase(10, "tenth")]
        //[TestCase(11, "eleventh")]
        //[TestCase(12, "twelveth")]
        //[TestCase(13, "thirteenth")]
        //[TestCase(14, "fourteenth")]
        //[TestCase(15, "fifteenth")]
        //[TestCase(16, "sixteenth")]
        //[TestCase(17, "seventeenth")]
        //[TestCase(18, "eighteenth")]
        //[TestCase(19, "nineteenth")]
        //[TestCase(20, "twentieth")]
        //[TestCase(21, "twenty first")]
        //[TestCase(22, "twenty second")]
        //[TestCase(23, "twenty third")]
        //[TestCase(24, "twenty fourth")]
        //[TestCase(25, "twenty fifth")]
        //[TestCase(26, "twenty sixth")]
        //[TestCase(27, "twenty seventh")]
        //[TestCase(28, "twenty eighth")]
        //[TestCase(29, "twenty ninth")]
        //[TestCase(30, "thirtieth")]
        //[TestCase(31, "thirty first")]
        //[TestCase(32, "thirty second")]
        //[TestCase(33, "thirty third")]
        //[TestCase(34, "thirty fourth")]
        //[TestCase(35, "thirty fifth")]
        //[TestCase(36, "thirty sixth")]
        //[TestCase(37, "thirty seventh")]
        //[TestCase(38, "thirty eighth")]
        //[TestCase(39, "thirty ninth")]
        //[TestCase(40, "fortieth")]
        //[TestCase(41, "forty first")]
        //[TestCase(42, "forty second")]
        //[TestCase(43, "forty third")]
        //[TestCase(44, "forty fourth")]
        //[TestCase(45, "forty fifth")]
        //[TestCase(46, "forty sixth")]
        //[TestCase(47, "forty seventh")]
        //[TestCase(48, "forty eighth")]
        //[TestCase(49, "forty ninth")]
        //[TestCase(50, "fiftieth")]
        //[TestCase(51, "fifty first")]
        //[TestCase(52, "fifty second")]
        //[TestCase(53, "fifty third")]
        //[TestCase(54, "fifty fourth")]
        //[TestCase(55, "fifty fifth")]
        //[TestCase(56, "fifty sixth")]
        //[TestCase(57, "fifty seventh")]
        //[TestCase(58, "fifty eighth")]
        //[TestCase(59, "fifty ninth")]
        //[TestCase(60, "sixtieth")]
        //[TestCase(61, "sixty first")]
        //[TestCase(62, "sixty second")]
        //[TestCase(63, "sixty third")]
        //[TestCase(64, "sixty fourth")]
        //[TestCase(65, "sixty fifth")]
        //[TestCase(66, "sixty sixth")]
        //[TestCase(67, "sixty seventh")]
        //[TestCase(68, "sixty eighth")]
        //[TestCase(69, "sixty ninth")]
        //[TestCase(70, "seventieth")]
        //[TestCase(71, "seventy first")]
        //[TestCase(72, "seventy second")]
        //[TestCase(73, "seventy third")]
        //[TestCase(74, "seventy fourth")]
        //[TestCase(75, "seventy fifth")]
        //[TestCase(76, "seventy sixth")]
        //[TestCase(77, "seventy seventh")]
        //[TestCase(78, "seventy eighth")]
        //[TestCase(79, "seventy ninth")]
        //[TestCase(80, "eightieth")]
        //[TestCase(81, "eighty first")]
        //[TestCase(82, "eighty second")]
        //[TestCase(83, "eighty third")]
        //[TestCase(84, "eighty fourth")]
        //[TestCase(85, "eighty fifth")]
        //[TestCase(86, "eighty sixth")]
        //[TestCase(87, "eighty seventh")]
        //[TestCase(88, "eighty eighth")]
        //[TestCase(89, "eighty ninth")]
        //[TestCase(90, "ninetieth")]
        //[TestCase(91, "ninety first")]
        //[TestCase(92, "ninety second")]
        //[TestCase(93, "ninety third")]
        //[TestCase(94, "ninety fourth")]
        //[TestCase(95, "ninety fifth")]
        //[TestCase(96, "ninety sixth")]
        //[TestCase(97, "ninety seventh")]
        //[TestCase(98, "ninety eighth")]
        //[TestCase(99, "ninety ninth")]
        //[TestCase(100, "hundredth")]
        //[TestCase(101, "hundred and first")]
        //[TestCase(102, "hundred and second")]
        //[TestCase(103, "hundred and third")]
        //[TestCase(104, "hundred and fourth")]
        //[TestCase(105, "hundred and fifth")]
        //[TestCase(106, "hundred and sixth")]
        //[TestCase(107, "hundred and seventh")]
        //[TestCase(108, "hundred and eighth")]
        //[TestCase(109, "hundred and ninth")]
        //[TestCase(110, "hundred and tenth")]
        //[TestCase(120, "hundred and twentieth")]
        public void ToOrdinal_VerboseOutput_VerifyResults(int numberValue, string expectedOutput)
        {
            string actualOutput = numberValue.ToOrdinal(true);
            Assert.AreEqual(expectedOutput, actualOutput, String.Format("Should be {0}, not  {1}!!", expectedOutput, actualOutput));
        }

        [TestCase(-1, false)]
        [TestCase(-1, true)]
        [TestCase(-2, false)]
        [TestCase(-2, true)]
        public void ToOrdinal_PassNegativeArgument_ThrowsException(int numberValue, bool isVerbose)
        {
            Assert.Throws(typeof(ArgumentException), () => numberValue.ToOrdinal(isVerbose));
        }

        #endregion ToOrdinal

        #region WithFirstLetterCapitalized

        [TestCase("firstWord", "FirstWord")]
        [TestCase("ALLCAPS", "ALLCAPS")]
        [TestCase("", "")]
        [TestCase("123", "123")]
        public void WithFirstLetterCapitalized_VariousValidInputs(string inputText, string expectedOutput)
        {
            string actualOutput = inputText.WithFirstLetterCapitalized();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        #endregion

        #region WithFirstLetterInLowercase

        [TestCase("firstWord", "firstWord")]
        [TestCase("ALLCAPS", "aLLCAPS")]
        [TestCase("alllowercase", "alllowercase")]
        [TestCase("", "")]
        [TestCase("123", "123")]
        public void WithFirstLetterInLowercase_VariousValidInputs(string inputText, string expectedOutput)
        {
            string actualOutput = inputText.WithFirstLetterInLowercase();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        #endregion

    }
}
